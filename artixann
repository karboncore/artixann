#!/bin/bash

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# artixann
# a viewer for the Artix Linux news feed, written in bash
#
# Copyright 2023 D. Murphy
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

while [[ -n "$1" ]]; do
  case "$1" in
    -w|--wrapsize) shift; wrapSize="$1"                                       ;;
    -i|--infile)   shift; inFile="$1"                                         ;;
    -n|--number)   shift; num="$1"                                            ;;
    -u|--unread)   unread=1                                                   ;;
    -c|--nocolor)  nocolor=1                                                  ;;
    -b|--brief)    brief=1                                                    ;;
    -h|--help)     help=1                                                     ;;
    -s|--since)    shift; sinceTime=$(($(date +%s)-$(($1*86400))))            ;;
    -l|--url)      url=1                                                      ;;
    -f|--fold)     foldwrap=1                                                 ;;
    *) echo "invalid option $1"; exit 1                                       ;;
  esac
  shift
done

if (($help)); then
  echo "
A viewer for the Artix Linux news feed, written in bash

Usage: artixann [options]

Options:
  -h, --help              show this message and exit
  -w, --wrapsize <width>  maximum line width. defaults to current console width
  -c, --nocolor           do not print in color. default is colorized output
  -b, --brief             do not print body of each news
  -i, --infile <path>     read news feed from file. use - for stdin
  -u, --unread            display only previously unread news
  -s, --since <days>      display news going back the given number of days
  -n, --number <number>   show this number of items. defaults to all
  -l, --url               resolve titles as hyperlinks
  -f, --fold              use fold instead of internal word wrap"
  exit 0
fi

# Defaults
: wrapSize=${wrapSize:=$(tput cols)}
: num=${num:=999}

if [[ ! -z "$inFile" ]]; then
  file="$(cat "$inFile")"
else
  file="$(curl https://artixlinux.org/feed.php --silent)"
fi

if (($unread)); then
  readLog=~/.local/share/artixann/lastread
  if [[ -f $readLog ]]; then
    mapfile -t lastTime < $readLog
  else
    mkdir -p $(dirname $readLog)
  fi
fi

# Define colors
if [[ -z $nocolor ]]; then
  BLUE="\e[1;34m"
  WHITE="\e[1;97m"
  blue="\e[34m"
  clear="\e[0m"
  BOLD="\e[1m"
  ITALIC="\e[3m"
  UNDERLINE="\e[4m"
  UBOLD="\e[22m"
  UITALIC="\e[23m"
  UUNDERLINE="\e[24m"
  BULLET="\u2022"
else
  BULLET="*"
fi

# Parse &, <, and >, parse hyperlinks, (to remove leading and trailing spaces s@^ *@@g; s@[ \t]*\$@@g;)
file="$( sed "s@amp;@@g; s@&lt;@<@g; s@&gt;@>@g;
              s@<a[^>]*>@${blue/\\/\\\\}@g;
              s@</a>@${clear/\\/\\\\}@g;
              s@^ *@@g; s@[ \t]*\$@@g;
              s@<strong>\|<em>\|<b>@${BOLD/\\/\\\\}@g; s@</strong>\|</em>\|</b>@${UBOLD/\\/\\\\}@g;
              s@<i>@${ITALIC/\\/\\\\}@g; s@</i>@${UITALIC/\\/\\\\}@g;
              s@<u>@${UNDERLINE/\\/\\\\}@g; s@</u>@${UUNDERLINE/\\/\\\\}@g;
              s@> *@>@g; s@%@%%@g;
              s@&quot;@\"@g;
              s@[[:space:]]*<li>@\\$BULLET @g" \
              <<< "$file" )"

# Remove newlines and squeeze spaces, unless in code block!
fstrip="$(tr -s "\n" " " <<< "$file" )"
fcode="$( awk '{printf "%s\\n", $0}' <<< "$file" )"
while [[ "$fstrip" =~ "</rss>" ]]; do
  fstrip="${fstrip#*<}"
  fcode="${fcode#*<}"
  case "$fstrip" in
    "code>"*)  fnew+="<${fcode%%<*}"  ;;
    *)         fnew+="<${fstrip%%<*}" ;;
  esac
done
file="$fnew"
unset fstrip fcode fnew

# But, re-add newlines for manual breaks
file="$( sed "s@ *<br /> *@\n@g;s@ *<br> *@\n@g; s@ *</br> *@\n@g;
              s@ *</li> *</ul> *@@g; s@ *</li> *@\\\n@g;
              s@<ul>@@g; s@</ul>@@g" <<< "$file" )"

# Parse code block
file="$( sed "s@^ *<code>@${BOLD/\\/\\\\}@g;
              s@<code>@\\\n${BOLD/\\/\\\\}@g;
              s%^ *</code>%${clear/\\/\\\\}%g;
              s@\\\n</code> *@${clear/\\/\\\\}\\\n@g;
              s@</code> *@${clear/\\/\\\\}\\\n@g;" \
              <<< "$file" )"

function wordWrap {
  local line text cols a i j start end

  text="$1"
  cols="$2"

  while read -r a; do
    i=0; j=0; start=0; end=0
    z=${#a}
    while [[ i -lt $z ]]; do

      # Escape character here
      case "${a:$i:2}" in
        '\e')
          while ! [[ "${a:$i:1}" == "m" ]]; do
            i=$(( $i+1 ))
          done
          j=$(( $j-1 ))
          ;;
        ' '*)
          end=$i
          endj=$j
          ;;
        '\n')
          i=$(( $i+1 ))
          j=-1
          ;;
        '\u')
          i=$(( $i+5 ))
          ;;
      esac

      if [[ $j -eq $cols ]]; then
        line+="${a:$start:$(($end-$start))}\n"
        start=$(( $end+1 ))
        j=$(( $cols - $endj ))
      fi
      i=$(($i+1))
      j=$(($j+1))
    done
    line+="${a:$start:$z}\n"
  done <<< "${text}"
  printf "$line\n"
}

function printItem {
  local link timestamp title description block printBlock epochTime

  file="${file#*<item>}"

  timestamp="${file#*<pubDate>}"
  #timestamp="${timestamp%%<*}"
  timestamp="${timestamp%%:*}"
  timestamp="${timestamp% *}"
  if (($unread)) || (($sinceTime)); then
    epochTime=$(date -d "$timestamp" +%s -u)
    (($i)) || maxTime=$epochTime
    if [[ $epochTime -le $lastTime || $epochTime -le $sinceTime ]]; then
      return 1
    fi
  fi

  link="${file#*<link>}"
  link="${link%%</link>*}"

  title="${file#*<title>}"
  title="${title%%</title>*}"

  printf "$UNDERLINE$BLUE"
  if ! (($url)); then
    printf "%s%*s\n" "$title" $(( $wrapSize - ${#title} )) "$timestamp"
  else
    printf '\e]8;;'"$link"'\e\\'"$title"'\e]8;;\e\\'
    printf "%*s\n" $(( $wrapSize - ${#title} )) "$timestamp"
  fi
  printf "$clear"

  if (($brief)); then
    printf "\n"
    return 0
  fi

  description="${file#*<description> *}"
  description="${description%%</description>*}"

  if ! (($foldwrap)); then
    wordWrap "$description" $wrapSize
  else
    printf "$description\n\n" | fold -w $wrapSize -s
  fi
  return 0
}

printf "\n"
i=0; while [[ "$file" =~ "<item>" && $i -lt "$num" ]]; do
  printItem || break
  i=$((i+1))
done

if [[ $i == 0 ]]; then
  printf "${WHITE}No news to display.$clear\n"
elif (($unread)); then
  printf "${BLUE}:: ${WHITE}Mark messages as read? [y/N] $clear"
  read -r ans
  if [[ "$ans" == y || "$ans" == yes ]]; then
    echo $maxTime > $readLog
  fi
fi
